allprojects {
    apply plugin: "base"
}

configurations {
    moduleArchives
    serviceArchives
}

dependencies {
    moduleArchives project(path: ":modules:Base", configuration: "archives")
    moduleArchives project(path: ":modules:Extras", configuration: "archives")
    serviceArchives project(path: ":services:Nifi", configuration: "archives")
    serviceArchives project(path: ":services:Zookeeper", configuration: "archives")
}

project(":modules") {
    subprojects {
        artifacts {
            archives buildDir
        }

        ext {
            moduleDir = new File(buildDir, "${project.name}Module")
        }

        buildArchives {
            doFirst {
                copy {
                    from ('.')
                    include 'config/**/*'
                    include 'share/**/*'
                    into moduleDir
                }
            }
        }
    }
}

project(":services") {
    subprojects {
        artifacts {
            archives buildDir
        }

        ext {
            serviceDir = new File(buildDir, "${project.name}Service")
        }

        buildArchives {
            doFirst {
                copy {
                    from ('.')
                    include 'bin/**/*'
                    include 'conf/**/*'
                    into serviceDir
                }
            }
        }
    }
}

task prepareModules(type: Copy) {
    into "${buildDir}/modules"

    configurations.moduleArchives.getAllDependencies().each { dependency ->
        dependency.getProjectConfiguration().getArtifacts().each { artifact ->
            println artifact
            from(artifact.getFile())
        }
    }
}

task prepareServices(type: Copy) {
    into "${buildDir}/services"

    configurations.serviceArchives.getAllDependencies().each { dependency ->
        dependency.getProjectConfiguration().getArtifacts().each { artifact ->
            println artifact
            from(artifact.getFile())
        }
    }
}

task prepare(dependsOn: [prepareModules, prepareServices])

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}
